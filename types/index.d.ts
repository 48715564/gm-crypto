declare module "gm-crypto" {
  export namespace SM2 {
    /** Generates a new asymmetric key pair */
    export function generateKeyPair(): {
      privateKey: string;
      publicKey: string;
    };
    /** 
     * Encrypt data 
     * @param data Plain message
     * @param key Public key generated by SM2.generateKeyPair()
     * @param options encrypt options
     * */
    export function encrypt(data: string | ArrayBuffer | Buffer, key: string, options?: EncryptOptions): string | ArrayBuffer;
    /** 
     * Decrypt data 
     * @param data Ciphered data
     * @param key Public key generated by SM2.generateKeyPair()
     * @param options 
     * */
    export function decrypt(data: string | ArrayBuffer | Buffer, key: string, options?: DecryptOptions): string | ArrayBuffer;
    export interface EncryptOptions {
      /** 
       * Concatenation mode
       * @default "C1C3C2"
       *  */
      mode?: "C1C3C2" | "C1C2C3";
      /** 
       * The encoding of the plain data string,if `data` is not a string then `inputEncoding` is ignored.
       * @default "utf8"
       */
      inputEncoding?: string;
      /** If `outputEncoding` is provided, a string will be returned, otherwise a [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) is returned. */
      outputEncoding?: string;
    }
    export interface DecryptOptions {
      /** 
       * Concatenation mode
       * @default "C1C3C2" 
       *  */
      mode?: "C1C3C2" | "C1C2C3";
      /** 
       * The encoding of the plain data string,if `data` is not a string then `inputEncoding` is ignored.
       */
      inputEncoding?: string;
      /** If `outputEncoding` is provided, a string will be returned, otherwise a [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) is returned. */
      outputEncoding?: string;
    }
  }
  export namespace SM3 {
    /**
     * Calculates the digest.
     * @param data Data message
     * @param inputEncoding The encoding of the data string, if data is not a string then inputEncoding is ignored.Default is "utf8"
     * @param outputEncoding If `outputEncoding` is provided, a string will be returned, otherwise a [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) is returned.
     */
    export function digest(data: string | ArrayBuffer | Buffer, inputEncoding?: string, outputEncoding?: string): string | ArrayBuffer;
  }
  export namespace SM4 {
    /**
     * Encrypt data.
     * @param data Plain message
     * @param key Cipher key(any string of 32 hexadecimal digits)
     * @param options Options
     */
    export function encrypt(data: string | ArrayBuffer | Buffer, key: string, options?: EncryptOptions): string | ArrayBuffer;
    export interface EncryptOptions {
      /**
       * Block cipher mode
       * @default "ECB"
       */
      mode?: "ECB" | "CBC";
      /**
       * Initialization vector(any string of 32 hexadecimal digits)
       */
      iv?: string;
      /**
       * The encoding of the plain data string,if data is not a string then inputEncoding is ignored.
       * @default "utf8"
       */
      inputEncoding?: string;
      /** If `outputEncoding` is provided, a string will be returned, otherwise a [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) is returned. */
      outputEncoding?: string;
    }
    /**
     * Decrypt data.
     * @param data Ciphered data
     * @param key Cipher key(any string of 32 hexadecimal digits)
     * @param options Options
     */
    export function decrypt(data: string | ArrayBuffer | Buffer, key: string, options?: DecryptOptions): string | ArrayBuffer;
    export interface DecryptOptions {
      /**
       * Block cipher mode
       * @default "ECB"
       */
      mode?: "ECB" | "CBC";
      /**
       * Initialization vector(any string of 32 hexadecimal digits)
       */
      iv?: string;
      /**
       * The encoding of the plain data string,if data is not a string then inputEncoding is ignored.
       */
      inputEncoding?: string;
      /** If `outputEncoding` is provided, a string will be returned, otherwise a [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) is returned. */
      outputEncoding?: string;
    }
  }